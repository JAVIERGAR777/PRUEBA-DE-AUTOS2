<!DOCTYPE html>
<html>
<head>
    <title>Alerta Veh√≠culos + Zonas Personalizadas</title>
    <meta charset="utf-8" />
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <!-- Leaflet CSS -->
    <link rel="stylesheet" href="https://unpkg.com/leaflet@1.7.1/dist/leaflet.css" />
    <!-- Leaflet Draw CSS -->
    <link rel="stylesheet" href="https://unpkg.com/leaflet-draw@1.0.4/dist/leaflet.draw.css" />
    <style>
        body {
            margin: 0;
            padding: 0;
            font-family: 'Segoe UI', Tahoma, Geneva, Verdana, sans-serif;
            overflow: hidden;
        }
        #map {
            width: 100%;
            height: 100vh;
        }
        /* Alertas de veh√≠culos */
        #alerta-container {
            position: fixed;
            bottom: 10px;
            left: 10px;
            right: 10px;
            background: linear-gradient(135deg, #ff5f5f, #ff1c1c);
            color: white;
            padding: 10px;
            border-radius: 10px;
            z-index: 1000;
            display: none;
            max-height: 40vh;
            overflow-y: auto;
            box-shadow: 0 4px 20px rgba(255, 0, 0, 0.4);
        }
        .alerta-item {
            padding: 8px;
            margin-bottom: 8px;
            background: rgba(255,255,255,0.2);
            border-radius: 6px;
        }
        /* Controles UI */
        #gps-status {
            position: fixed;
            top: 15px;
            right: 15px;
            background: rgba(0,0,0,0.7);
            color: white;
            padding: 8px 12px;
            border-radius: 20px;
            z-index: 1000;
            cursor: pointer;
        }
        #contador-alertas {
            position: fixed;
            top: 60px;
            right: 15px;
            background: rgba(0,0,0,0.7);
            color: white;
            padding: 5px 10px;
            border-radius: 20px;
            z-index: 1000;
            display: none;
        }
        /* Panel de zonas */
        #zonas-panel {
            position: fixed;
            top: 100px;
            left: 10px;
            background: rgba(255,255,255,0.9);
            padding: 10px;
            border-radius: 8px;
            z-index: 1000;
            width: 250px;
            box-shadow: 0 2px 10px rgba(0,0,0,0.2);
        }
        .zona-item {
            padding: 8px;
            margin: 5px 0;
            background: #f5f5f5;
            border-radius: 5px;
            border-left: 4px solid #FF5722;
        }
        .btn {
            background: #4CAF50;
            color: white;
            border: none;
            padding: 8px;
            border-radius: 5px;
            cursor: pointer;
            width: 100%;
            margin-top: 5px;
        }
        .btn-azul {
            background: #2196F3;
        }
        .btn-rojo {
            background: #F44336;
        }
    </style>
</head>
<body>
    <div id="map"></div>
    
    <!-- Alertas de veh√≠culos -->
    <div id="alerta-container">
        <h3 style="margin: 0 0 10px 0;">üö® VEH√çCULOS CERCANOS</h3>
        <div id="alerta-contenido"></div>
    </div>
    
    <!-- Panel de zonas -->
    <div id="zonas-panel">
        <h3 style="margin: 0 0 10px 0;">üó∫Ô∏è Zonas Guardadas</h3>
        <button id="btn-nueva-zona" class="btn">‚ûï Nueva Zona</button>
        <div id="lista-zonas"></div>
    </div>

    <!-- Leaflet JS -->
    <script src="https://unpkg.com/leaflet@1.7.1/dist/leaflet.js"></script>
    <!-- Leaflet Draw JS -->
    <script src="https://unpkg.com/leaflet-draw@1.0.4/dist/leaflet.draw.js"></script>
    
    <script>
        // Configuraci√≥n
        const SHEETBEST_URL = "https://api.sheetbest.com/sheets/e9a91f99-312f-43c1-875e-1d8dcbe3a7d5"; // Tu URL
        const DISTANCIA_ALERTA_KM = 0.5; // 500 metros
        const INTERVALO_ALERTAS = 3000; // 3 segundos
        
        // Variables
        let map;
        let drawnItems = new L.FeatureGroup();
        let vehiculos = [];
        let userLocation = null;
        let userMarker = null;
        let drawControl = null;
        
        // Inicializar mapa
        function initMap() {
            map = L.map('map').setView([-34.6037, -58.3816], 12);
            L.tileLayer('https://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png', {
                attribution: '&copy; OpenStreetMap'
            }).addTo(map);
            
            map.addLayer(drawnItems);
            
            // Configurar geolocalizaci√≥n
            configurarGeolocalizacion();
            
            // Cargar datos
            cargarVehiculos();
            cargarZonas();
            
            // Eventos
            document.getElementById('btn-nueva-zona').addEventListener('click', iniciarDibujoZona);
        }
        
        // Configurar geolocalizaci√≥n
        function configurarGeolocalizacion() {
            map.locate({
                setView: false,
                watch: true,
                enableHighAccuracy: true,
                maximumAge: 0,
                timeout: 15000
            });
            
            map.on('locationfound', function(e) {
                userLocation = e.latlng;
                
                if (!userMarker) {
                    userMarker = L.circleMarker([userLocation.lat, userLocation.lng], {
                        color: '#3388ff',
                        fillColor: '#3388ff',
                        fillOpacity: 1,
                        radius: 5,
                        weight: 3
                    }).addTo(map).bindPopup("¬°Est√°s aqu√≠!");
                } else {
                    userMarker.setLatLng([userLocation.lat, userLocation.lng]);
                }
                
                // Verificar alertas peri√≥dicamente
                setInterval(verificarAlertas, INTERVALO_ALERTAS);
                verificarAlertas();
            });
        }
        
        // Cargar veh√≠culos desde SheetBest
        async function cargarVehiculos() {
            try {
                const response = await fetch(SHEETBEST_URL);
                const data = await response.json();
                
                vehiculos = data.filter(v => v.condicion !== "Levantado").map(v => {
                    const coords = v.Coordenadas.split(',').map(Number);
                    return {
                        ...v,
                        lat: coords[0],
                        lng: coords[1]
                    };
                });
                
                // Mostrar marcadores
                vehiculos.forEach(v => {
                    L.circleMarker([v.lat, v.lng], {
                        color: '#ff0000',
                        fillColor: '#ff4444',
                        fillOpacity: 0.9,
                        radius: 5,
                        weight: 2
                    }).addTo(map).bindPopup(`
                        <div style="padding: 8px;">
                            <h4 style="margin: 0 0 8px 0;">Veh√≠culo #${v.ID}</h4>
                            <p style="margin: 0 0 5px 0;"><strong>Direcci√≥n:</strong> ${v.Direccion || 'No especificada'}</p>
                            <button onclick="marcarComoLevantado(${v.ID})" 
                                    style="background: #4CAF50; color: white; border: none; padding: 6px 10px; border-radius: 4px; cursor: pointer; width: 100%;">
                                üöó MARCAR COMO LEVANTADO
                            </button>
                        </div>
                    `);
                });
            } catch (error) {
                console.error("Error al cargar veh√≠culos:", error);
            }
        }
        
        // Cargar zonas desde SheetBest
        async function cargarZonas() {
            try {
                const response = await fetch(SHEETBEST_URL);
                const data = await response.json();
                
                const zonas = data.filter(item => item.Poligonos);
                const listaZonas = document.getElementById('lista-zonas');
                listaZonas.innerHTML = '';
                
                zonas.forEach(zona => {
                    const puntos = zona.Poligonos.split(';').map(p => {
                        const [lat, lng] = p.split(',').map(Number);
                        return [lat, lng];
                    });
                    
                    const poligono = L.polygon(puntos, {
                        color: '#FF5722',
                        fillOpacity: 0.3
                    }).addTo(drawnItems);
                    
                    poligono.bindPopup(`<b>${zona.Direccion || 'Zona sin nombre'}</b>`);
                    
                    // Agregar a la lista
                    const item = document.createElement('div');
                    item.className = 'zona-item';
                    item.innerHTML = `
                        <strong>${zona.Direccion || 'Zona sin nombre'}</strong>
                        <div class="zona-buttons">
                            <button class="btn btn-azul" onclick="centrarZona(${JSON.stringify(puntos)})">Ver</button>
                            <button class="btn btn-rojo" onclick="eliminarZona('${zona.ID}')">Eliminar</button>
                        </div>
                    `;
                    listaZonas.appendChild(item);
                });
            } catch (error) {
                console.error("Error al cargar zonas:", error);
            }
        }
        
        // Iniciar dibujo de zona
        function iniciarDibujoZona() {
            if (drawControl) {
                map.removeControl(drawControl);
            }
            
            drawControl = new L.Control.Draw({
                draw: {
                    polygon: {
                        shapeOptions: {
                            color: '#FF5722',
                            fillOpacity: 0.3
                        },
                        allowIntersection: false
                    },
                    marker: false,
                    circle: false,
                    rectangle: false,
                    polyline: false
                },
                edit: false
            });
            
            map.addControl(drawControl);
            
            map.on(L.Draw.Event.CREATED, function(e) {
                const layer = e.layer;
                const nombre = prompt("Nombre de la zona:");
                
                if (nombre) {
                    // Convertir puntos a formato para SheetBest
                    const puntos = layer.getLatLngs()[0].map(p => `${p.lat},${p.lng}`).join(';');
                    
                    // Guardar en SheetBest
                    guardarZonaEnSheet(nombre, puntos);
                    
                    // Agregar al mapa
                    layer.bindPopup(`<b>${nombre}</b>`);
                    drawnItems.addLayer(layer);
                    
                    // Actualizar lista
                    cargarZonas();
                }
                
                map.removeControl(drawControl);
            });
        }
        
        // Guardar zona en SheetBest
        async function guardarZonaEnSheet(nombre, puntos) {
            try {
                const response = await fetch(SHEETBEST_URL, {
                    method: "POST",
                    headers: { "Content-Type": "application/json" },
                    body: JSON.stringify({
                        Direccion: nombre,
                        Poligonos: puntos,
                        condicion: "Activo"
                    })
                });
                
                if (!response.ok) throw new Error("Error al guardar");
                console.log("‚úÖ Zona guardada en SheetBest");
            } catch (error) {
                console.error("Error:", error);
                alert("Error al guardar zona");
            }
        }
        
        // Verificar alertas de proximidad
        function verificarAlertas() {
            if (!userLocation || vehiculos.length === 0) return;
            
            const vehiculosCercanos = [];
            
            vehiculos.forEach(v => {
                const dist = calcularDistancia(
                    userLocation.lat, userLocation.lng,
                    v.lat, v.lng
                );
                
                if (dist <= DISTANCIA_ALERTA_KM) {
                    vehiculosCercanos.push({
                        vehiculo: v,
                        distancia: dist
                    });
                }
            });
            
            mostrarAlertas(vehiculosCercanos);
        }
        
        // Mostrar alertas en UI
        function mostrarAlertas(vehiculosCercanos) {
            const alertaContenido = document.getElementById('alerta-contenido');
            const contadorAlertas = document.getElementById('contador-alertas');
            
            if (vehiculosCercanos.length > 0) {
                let html = '';
                vehiculosCercanos.forEach(v => {
                    html += `
                        <div class="alerta-item">
                            <p><strong>üìç ${v.vehiculo.Direccion || 'Sin direcci√≥n'}</strong></p>
                            <p>Distancia: ${v.distancia.toFixed(2)} km</p>
                        </div>
                    `;
                });
                
                alertaContenido.innerHTML = html;
                document.getElementById('alerta-container').style.display = 'block';
                contadorAlertas.style.display = 'block';
                contadorAlertas.innerHTML = `Alertas: ${vehiculosCercanos.length}`;
            } else {
                document.getElementById('alerta-container').style.display = 'none';
                contadorAlertas.style.display = 'none';
            }
        }
        
        // Calcular distancia entre puntos
        function calcularDistancia(lat1, lon1, lat2, lon2) {
            const R = 6371; // Radio de la Tierra en km
            const dLat = (lat2 - lat1) * Math.PI / 180;
            const dLon = (lon2 - lon1) * Math.PI / 180;
            const a = Math.sin(dLat/2) * Math.sin(dLat/2) +
                      Math.cos(lat1 * Math.PI / 180) * Math.cos(lat2 * Math.PI / 180) * 
                      Math.sin(dLon/2) * Math.sin(dLon/2);
            return R * 2 * Math.atan2(Math.sqrt(a), Math.sqrt(1-a));
        }
        
        // Funciones globales
        window.marcarComoLevantado = async function(id) {
            try {
                const vehiculo = vehiculos.find(v => v.ID == id);
                if (!vehiculo) throw new Error("Veh√≠culo no encontrado");
                
                const response = await fetch(SHEETBEST_URL, {
                    method: "POST",
                    headers: { "Content-Type": "application/json" },
                    body: JSON.stringify({
                        ID: vehiculo.ID.toString(),
                        condicion: "Levantado",
                        fecha_levantado: new Date().toLocaleDateString('es-AR')
                    })
                });
                
                if (!response.ok) throw new Error("Error en la API");
                
                alert(`‚úÖ Veh√≠culo ${id} marcado como levantado`);
                cargarVehiculos();
            } catch (error) {
                console.error("Error:", error);
                alert(`‚ùå Error: ${error.message}`);
            }
        };
        
        window.centrarZona = function(puntos) {
            const latlngs = puntos.map(p => L.latLng(p[0], p[1]));
            map.fitBounds(L.latLngBounds(latlngs));
        };
        
        window.eliminarZona = async function(id) {
            if (confirm("¬øEliminar esta zona permanentemente?")) {
                try {
                    const response = await fetch(SHEETBEST_URL, {
                        method: "POST",
                        headers: { "Content-Type": "application/json" },
                        body: JSON.stringify({
                            ID: id,
                            condicion: "Eliminado"
                        })
                    });
                    
                    if (!response.ok) throw new Error("Error al eliminar");
                    
                    cargarZonas();
                } catch (error) {
                    console.error("Error:", error);
                    alert("No se pudo eliminar la zona");
                }
            }
        };
        
        // Iniciar la aplicaci√≥n
        initMap();
    </script>
</body>
</html>
